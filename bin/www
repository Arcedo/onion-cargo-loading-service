#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('onion-cargo-loading-service:server');
var http = require('http');
const logger = require("../api/logger");
var openapi = require('express-openapi');
var swaggerUi = require('swagger-ui-express');

var v1ContainerService = require('../api-v1/services/containerService');
var v1UserService = require('../api-v1/services/userService');
var v1GestorService = require('../api-v1/services/gestorService');
var v1ClientService = require('../api-v1/services/clientService');
var v1ApiDoc = require('../api-v1/api-doc');

const DEFAULT_PORT = '8082';  // Port del contenidor que espera Cloud Run

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || DEFAULT_PORT);
app.set('port', port);

logger.info(`Server port on ${port}`);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// OpenAPI routes
openapi.initialize({
  app: app,
  apiDoc: v1ApiDoc,
  dependencies: {
    containerService: v1ContainerService,
    userService: v1UserService,
    gestorService: v1GestorService,
    clientService: v1ClientService,
  },
  paths: "./api-v1/paths",
});

// OpenAPI UI
app.use(
  "/api-documentation",
  swaggerUi.serve,
  swaggerUi.setup(null, {
    swaggerOptions: {
      // S'ha de posar la ruta amb la versió, tal i com s'indica al atribut basePath del fitxer api-v1/api-doc.js
      url: `http://localhost:${port}/v1/api-docs`,
    },
  })
);
logger.info(`API Documentation in http://localhost:${port}/api-documentation/`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      logger.error(bind + ' default');
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.info('Listening on ' + bind);
}

/**
 * Exit gracefully: En Cloud Run tenim 10 segons per tancar l'app
 */
process.on('SIGINT', onCloseGracefully);
process.on('SIGTERM', onCloseGracefully);
 
function onCloseGracefully() {
  logger.info('SIGTERM signal received.');

  // TODO: close database connections

  /* 
  // No tanquem el servidor de forma controlada, deixem que el matin ja que
  // triga mass a respondre la funció server.close()
  // Aquesta funció fa que el servidor deixi d'acceptar connexions
  logger.info('Closing http server.');
  server.close(() => {
    logger.info('Http server closed.');
  });
  */

  process.exit(0);
}