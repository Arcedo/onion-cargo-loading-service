# In our configuration, the cert.crt and cert.key settings reflect the location where we created our SSL certificate. 
# You will need to update the server_name and proxy_redirect lines with your own domain name. 
# There is some additional Nginx magic going on as well that tells requests to be read by Nginx and rewritten on the response side to ensure the reverse proxy is working.

# Install Nginx
# =============
# Update your package lists and install Nginx:
# sudo apt-get update
# sudo apt-get install nginx
# nginx -v
# Get a Certificate
# =================
# Next, you will need to purchase or create an SSL certificate. These commands are for a self-signed certificate, but you should get an officially signed certificate if you want to avoid browser warnings.
# Move into the proper directory and generate a certificate:
# cd /etc/nginx
# sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.crt
# You will be prompted to enter some information about the certificate. You can fill this out however you’d like; just be aware the information will be visible in the certificate properties. We’ve set the number of bits to 2048 since that’s the minimum needed to get it signed by a CA. If you want to get the certificate signed, you will need to create a CSR.
# Configure nginx
# ===============
# Edit: /etc/nginx/sites-available/default
# add following code
# Test and apply changes: 
# sudo nginx -t
# sudo systemctl restart nginx

# Tells the Nginx server to listen to any requests that come in on port 80 (default HTTP) and redirect them to HTTPS.
server {
    listen 80;
    return 301 http://$host$request_uri;
}

# A few quick things to point out here. If you don't have a domain name that resolves to your onion server, 
# then the proxy_redirect statement above won't function correctly without modification, so keep that in mind. 
# Also, if you misconfigure the proxy_pass (by adding a trailing slash for example), you will get something similar to the following in your onion Configuration page

server {

    # Next we have the SSL settings. This is a good set of defaults but can definitely be expanded on. For more explanation, please read this tutorial
    listen 8080;
    server_name cargoloading.domain.com;

    access_log            /var/log/nginx/cargoloading.access.log;

    # The final section is where the proxying happens.
    # It basically takes any incoming requests and proxies them to the onion instance that is bound/listening to port 8080 on the local network interface.
    # This is a slightly different situation, but this tutorial has some good information about the Nginx proxy settings.
    location / {

      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      # Fix the �~@~\It appears that your reverse proxy set up is broken" error.
      proxy_pass          http://localhost:8080;
      proxy_read_timeout  90;
      proxy_redirect      http://localhost:8080 https://cargoloading.domain.com;
    }
}